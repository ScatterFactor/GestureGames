这个项目是一个基于 Pygame 库实现的简单的丛林冒险游戏，具有实时手部跟踪功能。
以下是对其主要功能的概述，具体的代码逻辑请见代码中的注释：
1. 初始化和配置:
   - 使用 Pygame 库和 OpenCV（cv2）库进行游戏和图像处理的初始化。
   - 设置基本的游戏参数，如帧率、屏幕大小等。
   - 加载游戏中使用的图像（如背景、飞机、管道）和音效。

2. 手部跟踪:
   - 利用摄像头（通过 OpenCV）和 `MediaPipeHand` 类实现实时手部跟踪。
   - 处理摄像头捕获的图像，提取手部关键点，并计算手部关节的平均角度，需要通过angle值来控制飞机的垂直位置。

3. 游戏逻辑:
   - 有两个主要的游戏状态：欢迎屏幕（`welcomeScreen` 函数）和主游戏循环（`mainGame` 函数）。
   - 在欢迎屏幕中，用户可以通过按空格键或向上键开始游戏，控制台也会有相应提示
   - 在主游戏中，玩家控制一个飞机，飞机的垂直位置由手部关节的平均角度（angle）控制。
   - 游戏中包含移动的管道，玩家需要操作飞机避免与这些管道发生碰撞。

4. 碰撞检测和得分:
   - 游戏中包含碰撞检测逻辑，以判断飞机是否与管道发生了碰撞。
   - 每当飞机成功通过一组管道时，玩家的得分会增加。

5. 图形和声音效果:
   - 游戏中有基础的图形和声音效果，如背景图像、飞机图像、碰撞声音和得分声音。

6. 游戏循环:
   - 游戏在一个持续的循环中运行，直到飞机撞毁或玩家使用按键退出游戏。
   
第二个文件中定义了一个名为 `MediaPipeHand` 的类，它使用 Google 的 MediaPipe 库来进行实时的手部追踪和分析。
下面是对主要部分的详细解释：

1. **类初始化 (`__init__` 方法)**:
   - 初始化 `MediaPipeHand` 类，配置其基本属性如最大检测手的数量 (`max_num_hands`)。
   - 使用 MediaPipe 的手部解决方案 (`mp.solutions.hands`) 初始化手部追踪模型。
   - 设置模型的运行模式（如 `static_image_mode`）和检测置信度阈值（如 `min_detection_confidence` 和 `min_tracking_confidence`）。

2. **手部参数 (`self.param`)**:
   - 初始化一个字典列表，每个字典包含了一只手的信息，如关键点的二维和三维坐标、手型分类（左手或右手）、分数、关节角度等。

3. **关键点颜色和骨架 (`self.color` 和 `self.ktree`)**:
   - 定义用于绘制手部关键点和骨架的颜色和结构。

4. **结果转换 (`result_to_param` 方法)**:
   - 将 MediaPipe 的处理结果转换为类中定义的 `param` 格式。

5. **角度计算 (`convert_3d_joint_to_angle` 方法)**:
   - 计算手部关节的角度。

6. **绘图 (`draw2d` 方法)**:
   - 在图像上绘制手部关键点、骨架和其他相关信息。

7. **前向处理 (`forward` 方法)**:
   - 对输入的图像进行处理，提取手部信息。

整体而言，这个类是一个用于手部追踪和分析的工具，可以在图像中检测和标识手部，并提取手部的关键信息，
如关键点位置、手型、关节角度等。这对于需要手部交互的应用程序（如增强现实、手势控制等）非常有用。
这个游戏结合了传统的游戏元素与现代的手部跟踪技术，为玩家提供了一个独特且互动性强的游戏体验。
通过手部动作控制游戏中的飞机是这个游戏的一大特色。